"use client";
import { useState } from "react";
import Head from "next/head";
import Footer from "../components/Footer";
import { Button } from "../components/ui/button";
import "../styles/sociomap.css";
import ReactMarkdown from 'react-markdown';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export default function SocialEquityPolicyAdvocacyPage() {
  const [selectedPolicyCategory, setSelectedPolicyCategory] = useState("economic-equity");
  const [policySimulatorInput, setPolicySimulatorInput] = useState({
    budget: 1000000,
    targetPopulation: 50000,
  });
  const [simulatorResult, setSimulatorResult] = useState<number | null>(null);
  
  // New state for location and description
  const [location, setLocation] = useState("");
  const [description, setDescription] = useState("");
  const [recommendations, setRecommendations] = useState<{[key: string]: string}>({
    "economic-equity": "",
    "public-health": "",
    "disaster-preparedness": ""
  });
  const [isLoading, setIsLoading] = useState(false);

  const policyCategories = [
    { id: "economic-equity", name: "Economic Equity" },
    { id: "public-health", name: "Public Health" },
    { id: "disaster-preparedness", name: "Disaster Preparedness" },
  ];

  const handlePolicyCategoryChange = (category: string) => {
    setSelectedPolicyCategory(category);
  };

  const handleSimulatorInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setPolicySimulatorInput((prev) => ({
      ...prev,
      [name]: parseInt(value) || 0,
    }));
  };

  // Updated to use the backend API
  const runPolicySimulator = async () => {
    try {
      setIsLoading(true);
      const { budget, targetPopulation } = policySimulatorInput;
      
      const response = await fetch(`https://sociomap-backend.vercel.app/api/simulator`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          budget,
          targetPopulation,
          policyCategory: selectedPolicyCategory
        }),
      });

      const data = await response.json();
      setSimulatorResult(data.result);
    } catch (error) {
      console.error('Error running simulation:', error);
      alert('Failed to run simulation. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };
  
  const downloadPDF = async () => {
  
    const element = document.getElementById('recommendation-content');
    if (!element) return;
    
    try {
      // Show loading state
      setIsLoading(true);
      
     
      const categoryName = policyCategories.find(cat => cat.id === selectedPolicyCategory)?.name || 'Recommendations';
      
     
      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        logging: false,
        backgroundColor: '#ffffff'
      });
      
     
      const imgWidth = 210; 
      const pageHeight = 297; 
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      // Initialize PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      
      let position = 0;
      
      // Add title
      pdf.setFontSize(16);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`${categoryName} Policy Recommendations`, 20, 20);
      
      pdf.setFontSize(10);
      pdf.setTextColor(100, 100, 100);
      pdf.text(`Location: ${location || 'Not specified'}`, 20, 30);
      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 35);
    
      pdf.setDrawColor(200, 200, 200);
      pdf.line(20, 40, 190, 40);
      
      position = 45; 
      
      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 10, position, imgWidth - 20, imgHeight);
      
      let heightLeft = imgHeight;
      while (heightLeft > 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 10, position, imgWidth - 20, imgHeight);
        heightLeft -= pageHeight;
      }
      
      // Add footer
      const totalPages = pdf.internal.pages.length;
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setTextColor(150, 150, 150);
        pdf.text(`Generated by SocioMap® | Page ${i} of ${totalPages}`, pdf.internal.pageSize.width / 2, 287, { align: 'center' });
      }
      
      // Save the PDF
      pdf.save(`${categoryName.toLowerCase().replace(/\s+/g, '_')}_recommendations.pdf`);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to fetch recommendations for a single category
  const fetchRecommendations = async () => {
    if (!location || !description) {
      alert('Please enter both location and community description');
      return;
    }

    try {
      setIsLoading(true);
      const response = await fetch(`https://sociomap-backend.vercel.app/api/recommendations/${selectedPolicyCategory}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ location, description }),
      });

      if (!response.ok) {
        throw new Error('Failed to fetch recommendations');
      }

      const data = await response.json();
      
      setRecommendations(prev => ({
        ...prev,
        [selectedPolicyCategory]: data.recommendations
      }));
    } catch (error) {
      console.error('Error fetching recommendations:', error);
      alert('Failed to fetch recommendations. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to fetch all recommendations at once (more efficient)
  const fetchAllRecommendations = async () => {
    if (!location || !description) {
      alert('Please enter both location and community description');
      return;
    }

    try {
      setIsLoading(true);
      const response = await fetch(`https://sociomap-backend.vercel.app/api/recommendations/all`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ location, description }),
      });

      if (!response.ok) {
        throw new Error('Failed to fetch recommendations');
      }

      const data = await response.json();
      
      setRecommendations({
        "economic-equity": data.economicEquity,
        "public-health": data.publicHealth,
        "disaster-preparedness": data.disasterPreparedness
      });
    } catch (error) {
      console.error('Error fetching recommendations:', error);
      alert('Failed to fetch all recommendations. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="text-gray-900 font-sans">
      <Head>
        <title>Social Equity & Policy Advocacy</title>
      </Head>

      {/* Hero Section */}
      <section className="relative h-screen hero-section bg-gradient-to-b from-purple-900 to-pink-600 text-white flex items-center justify-center p-6">
        <div className="text-center">
          <h1 className="text-5xl md:text-6xl font-bold mb-4">
            Social Equity & Policy Advocacy
          </h1>
          <p className="text-lg max-w-2xl mx-auto">
            Empowering communities through equitable climate solutions with SocioMap®.
          </p>
        </div>
      </section>

      {/* Community Input Section */}
      <section className="py-16 bg-white">
        <div className="max-w-6xl mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-8">Community Profile</h2>
          <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-all duration-300">
            <div className="space-y-4">
              <div className="flex flex-col">
                <label className="text-gray-700 font-medium mb-2">Community Location:</label>
                <input
                  type="text"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  placeholder="e.g., Miami, FL or Rural Nebraska"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
              </div>
              <div className="flex flex-col">
                <label className="text-gray-700 font-medium mb-2">Community Description:</label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="Describe your community's unique challenges, demographics, economic situation, and environmental concerns..."
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  rows={4}
                />
              </div>
              <div className="flex flex-col sm:flex-row gap-4">
                <Button
                  onClick={fetchRecommendations}
                  className="flex-1 bg-purple-600 text-white hover:bg-purple-700"
                  disabled={isLoading}
                >
                  {isLoading ? "Generating..." : "Get Current Category Recommendations"}
                </Button>
                <Button
                  onClick={fetchAllRecommendations}
                  className="flex-1 bg-indigo-600 text-white hover:bg-indigo-700"
                  disabled={isLoading}
                >
                  {isLoading ? "Generating..." : "Get All Recommendations"}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Policy Recommendation Center */}
<section className="py-16 bg-gray-100 transition-all duration-300">
  <div className="max-w-6xl mx-auto px-4">
    <h2 className="text-3xl font-bold text-center mb-8">Policy Recommendation Center</h2>
    <div className="flex flex-col md:flex-row gap-8">
      <aside className="w-full md:w-1/3 bg-white p-6 rounded-lg shadow-md">
        <h3 className="text-xl font-semibold mb-4">Categories</h3>
        <ul className="space-y-4">
          {policyCategories.map((category) => (
            <li
              key={category.id}
              onClick={() => handlePolicyCategoryChange(category.id)}
              className={`p-4 cursor-pointer rounded-lg transition transform hover:scale-105 ${
                selectedPolicyCategory === category.id
                  ? "bg-purple-600 text-white"
                  : "bg-gray-100 text-gray-800 hover:bg-purple-100"
              }`}
            >
              {category.name}
            </li>
          ))}
        </ul>
      </aside>

      <div className="w-full md:w-2/3">
        {isLoading ? (
          <div className="bg-white p-8 rounded-lg shadow-md">
            <div className="py-8 text-center">
              <div className="animate-pulse inline-block h-8 w-8 rounded-full bg-purple-600"></div>
              <p className="mt-4 text-gray-600">Generating tailored recommendations...</p>
            </div>
          </div>
        ) : (
          <div className={`p-8 rounded-lg shadow-md ${
            selectedPolicyCategory === "economic-equity" 
              ? "bg-gradient-to-br from-blue-50 to-blue-100 border-l-4 border-blue-500" 
              : selectedPolicyCategory === "public-health" 
                ? "bg-gradient-to-br from-green-50 to-green-100 border-l-4 border-green-500" 
                : "bg-gradient-to-br from-amber-50 to-amber-100 border-l-4 border-amber-500"
          }`}>
            <div className="flex items-center mb-6">
              <div className={`p-3 rounded-full mr-4 ${
                selectedPolicyCategory === "economic-equity" 
                  ? "bg-blue-100 text-blue-600" 
                  : selectedPolicyCategory === "public-health" 
                    ? "bg-green-100 text-green-600" 
                    : "bg-amber-100 text-amber-600"
              }`}>
                {selectedPolicyCategory === "economic-equity" && (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                )}
                {selectedPolicyCategory === "public-health" && (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                  </svg>
                )}
                {selectedPolicyCategory === "disaster-preparedness" && (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                )}
              </div>
              <h3 className={`text-2xl font-bold ${
                selectedPolicyCategory === "economic-equity" 
                  ? "text-blue-700" 
                  : selectedPolicyCategory === "public-health" 
                    ? "text-green-700" 
                    : "text-amber-700"
              }`}>
                {policyCategories.find((cat) => cat.id === selectedPolicyCategory)?.name}
              </h3>
            </div>
            
            {recommendations[selectedPolicyCategory] ? (
              <div id="recommendation-content" className="prose max-w-none">
                <div className={`p-6 rounded-lg ${
                  selectedPolicyCategory === "economic-equity" 
                    ? "bg-white text-blue-800" 
                    : selectedPolicyCategory === "public-health" 
                      ? "bg-white text-green-800" 
                      : "bg-white text-amber-800"
                }`}>
                  <ReactMarkdown 
                    components={{
                      h1: ({...props}) => <h1 className="text-2xl font-bold mb-3" {...props} />,
                      h2: ({...props}) => <h2 className="text-xl font-bold mb-2 mt-4" {...props} />,
                      h3: ({...props}) => <h3 className="text-lg font-bold mb-2 mt-3" {...props} />,
                      p: ({...props}) => <p className="mb-3" {...props} />,
                      ul: ({...props}) => <ul className="list-disc pl-5 mb-3 space-y-1" {...props} />,
                      ol: ({...props}) => <ol className="list-decimal pl-5 mb-3 space-y-1" {...props} />,
                      li: ({...props}) => <li className="mb-1" {...props} />,
                      blockquote: ({...props}) => (
                        <blockquote className={`border-l-4 pl-4 italic my-3 ${
                          selectedPolicyCategory === "economic-equity" 
                            ? "border-blue-300" 
                            : selectedPolicyCategory === "public-health" 
                              ? "border-green-300" 
                              : "border-amber-300"
                        }`} {...props} />
                      ),
                    }}
                  >
                    {recommendations[selectedPolicyCategory]}
                  </ReactMarkdown>
                </div>
              </div>
            ) : (
              <div className={`text-center p-8 rounded-lg bg-white border border-dashed ${
                selectedPolicyCategory === "economic-equity" 
                  ? "border-blue-300" 
                  : selectedPolicyCategory === "public-health" 
                    ? "border-green-300" 
                    : "border-amber-300"
              }`}>
                <div className={`mb-4 ${
                  selectedPolicyCategory === "economic-equity" 
                    ? "text-blue-500" 
                    : selectedPolicyCategory === "public-health" 
                      ? "text-green-500" 
                      : "text-amber-500"
                }`}>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
                <h4 className="text-lg font-medium mb-2">No Recommendations Yet</h4>
                <p className="text-gray-600 mb-4">Enter your community location and description above to receive tailored policy recommendations.</p>
                <p className="text-sm text-gray-500">Our AI will analyze your community&apos;s unique characteristics to generate specific, actionable policy advice.</p>
              </div>
            )}
            
            {recommendations[selectedPolicyCategory] && (
              <div className="mt-6 flex flex-wrap gap-4 justify-between">
                <Button 
                  onClick={downloadPDF} 
                  disabled={isLoading}
                  className={`${
                    selectedPolicyCategory === "economic-equity" 
                      ? "bg-blue-600 hover:bg-blue-700" 
                      : selectedPolicyCategory === "public-health" 
                        ? "bg-green-600 hover:bg-green-700" 
                        : "bg-amber-600 hover:bg-amber-700"
                  } text-white flex items-center gap-2`}
                >
                  {isLoading ? (
                    <>
                      <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Processing...
                    </>
                  ) : (
                    <>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                      </svg>
                      Download PDF
                    </>
                  )}
                </Button>
                <Button className="bg-purple-600 hover:bg-purple-700 text-white flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                  </svg>
                  Share
                </Button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  </div>
</section>

      {/* Policy Simulator */}
      <section className="py-16 bg-white">
        <div className="max-w-6xl mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-8 text-black">Policy Simulator</h2>
          <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-all duration-300">
            <h3 className="text-xl font-semibold mb-4">Model Policy Effects</h3>
            <div className="space-y-4">
              <div className="flex items-center gap-4">
                <label className="text-gray-700 w-1/3">Budget ($):</label>
                <input
                  type="number"
                  name="budget"
                  value={policySimulatorInput.budget}
                  onChange={handleSimulatorInputChange}
                  className="w-2/3 p-2 border rounded-lg"
                />
              </div>
              <div className="flex items-center gap-4">
                <label className="text-gray-700 w-1/3">Target Population:</label>
                <input
                  type="number"
                  name="targetPopulation"
                  value={policySimulatorInput.targetPopulation}
                  onChange={handleSimulatorInputChange}
                  className="w-2/3 p-2 border rounded-lg"
                />
              </div>
              <Button
                onClick={runPolicySimulator}
                className="w-full bg-green-600 text-white hover:bg-green-700 mt-4"
                disabled={isLoading}
              >
                {isLoading ? "Processing..." : "Run Simulation"}
              </Button>
              {simulatorResult !== null && (
                <div className="mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <h4 className="font-medium text-gray-900">Simulation Results</h4>
                  <p className="text-gray-800 mt-2">
                    Projected Impact: <strong>{simulatorResult.toFixed(2)}%</strong> efficiency
                  </p>
                  <p className="text-sm text-gray-600 mt-1">
                    Based on the selected category: {policyCategories.find(cat => cat.id === selectedPolicyCategory)?.name}
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </section>

      {/* Community Feedback Hub */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-6xl mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-8">Community Feedback Hub</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition duration-300">
              <h3 className="text-xl font-semibold mb-4">Community Voices</h3>
              <p className="text-gray-700 mb-4">
                Share your challenges, insights, and ideas on improving climate resilience in your area.
              </p>
              <Button className="w-full bg-yellow-600 text-white hover:bg-yellow-700">
                Share Your Voice
              </Button>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition duration-300">
              <h3 className="text-xl font-semibold mb-4">Survey & Engagement Tools</h3>
              <p className="text-gray-700 mb-4">
                Participate in surveys to inform decision-makers about your community&apos;s needs.
              </p>
              <Button className="w-full bg-yellow-600 text-white hover:bg-yellow-700">
                Take a Survey
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <Footer />
    </div>
  );
}